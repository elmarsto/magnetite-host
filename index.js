'use strict';

var obsidian = require('obsidian');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default$5 = /*#__PURE__*/_interopDefaultLegacy(obsidian);

function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default$4 = /*#__PURE__*/_interopDefaultLegacy$1(obsidian__default$5['default']);

function _interopDefaultLegacy$1$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default$3 = /*#__PURE__*/_interopDefaultLegacy$1$1(obsidian__default$4['default']);

function _interopDefaultLegacy$1$1$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default$2 = /*#__PURE__*/_interopDefaultLegacy$1$1$1(obsidian__default$3['default']);

function _interopDefaultLegacy$1$1$1$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default$1 = /*#__PURE__*/_interopDefaultLegacy$1$1$1$1(obsidian__default$2['default']);

function _interopDefaultLegacy$1$1$1$1$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default = /*#__PURE__*/_interopDefaultLegacy$1$1$1$1$1(obsidian__default$1['default']);

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

let wasm;

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

function logError(f) {
    return function () {
        try {
            return f.apply(this, arguments);

        } catch (e) {
            let error = (function () {
                try {
                    return e instanceof Error ? `${e.message}\n\nStack:\n${e.stack}` : e.toString();
                } catch(_) {
                    return "<failed to stringify thrown value>";
                }
            }());
            console.error("wasm-bindgen: imported JS function that was not marked as `catch` threw an error:", error);
            throw e;
        }
    };
}
/**
*/
function greet() {
    wasm.greet();
}

async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {

        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {

        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

async function init(input) {
    if (typeof input === 'undefined') {
        input = (typeof document === 'undefined' ? new (commonjsRequire().URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)).replace(/\.js$/, '_bg.wasm');
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_alert_284f032d085c68b1 = logError(function(arg0, arg1) {
        alert(getStringFromWasm0(arg0, arg1));
    });

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }

    const { instance, module } = await load(await input, imports);

    wasm = instance.exports;
    init.__wbindgen_wasm_module = module;

    return wasm;
}

var exports$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    greet: greet,
    'default': init
});

var wasm$1 = async () => {
                        await init("assets/magnetite-9f3f175a.wasm");
                        return exports$1;
                    };

class MyPlugin extends obsidian__default['default'].Plugin {
	onload() {
		(async () => {
			const { greet } = await wasm$1();
			greet();
		})();
		console.log('loading plugin');

		this.addRibbonIcon('dice', 'Sample Plugin', () => {
			new obsidian__default['default'].Notice('This is a notice!');
		});

		this.addStatusBarItem().setText('Status Bar Text');

		this.addCommand({
			id: 'open-sample-modal',
			name: 'Open Sample Modal',
			// callback: () => {
			// 	console.log('Simple Callback');
			// },
			checkCallback: (checking) => {
				let leaf = this.app.workspace.activeLeaf;
				if (leaf) {
					if (!checking) {
						new SampleModal(this.app).open();
					}
					return true;
				}
				return false;
			}
		});

		this.addSettingTab(new SampleSettingTab(this.app, this));

		this.registerEvent(this.app.on('codemirror', (cm) => {
			console.log('codemirror', cm);
		}));

		this.registerDomEvent(document, 'click', (evt) => {
			console.log('click', evt);
		});

		this.registerInterval(window.setInterval(() => console.log('setInterval'), 5 * 60 * 1000));
	}

	onunload() {
		console.log('unloading plugin');
	}
}

class SampleModal extends obsidian__default['default'].Modal {
	constructor(app) {
		super(app);
	}

	onOpen() {
		let {contentEl} = this;
		contentEl.setText('Woah!');
	}

	onClose() {
		let {contentEl} = this;
		contentEl.empty();
	}
}

class SampleSettingTab extends obsidian__default['default'].PluginSettingTab {
	display() {
		let {containerEl} = this;

		containerEl.empty();

		containerEl.createEl('h2', {text: 'Settings for my awesome plugin.'});

		new obsidian__default['default'].Setting(containerEl)
			.setName('Setting #1')
			.setDesc('It\'s a secret')
			.addText(text => text.setPlaceholder('Enter your secret')
				.setValue('')
				.onChange((value) => {
					console.log('Secret: ' + value);
				}));

	}
}

var magnetiteSamplePlugin = MyPlugin;

var magnetiteSamplePlugin_1 = magnetiteSamplePlugin;

var magnetiteSamplePlugin_2 = magnetiteSamplePlugin_1;

var magnetiteSamplePlugin_3 = magnetiteSamplePlugin_2;

var magnetiteSamplePlugin_4 = magnetiteSamplePlugin_3;

var magnetiteSamplePlugin_5 = magnetiteSamplePlugin_4;

module.exports = magnetiteSamplePlugin_5;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
